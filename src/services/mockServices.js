// src/services/mockServices.js

// Mock audio processing service
export const processAudio = async (audioBlob) => {
  console.log("Mock audio processing:", audioBlob);
  await new Promise(resolve => setTimeout(resolve, 1000));
  return {
    success: true,
    text: "This is a simulated speech recognition result. What is the derivative of x²?"
  };
};

// Mock image processing service
export const processImage = async (imageFile) => {
  console.log("Mock image processing:", imageFile);
  await new Promise(resolve => setTimeout(resolve, 1000));
  const fileName = imageFile?.name?.toLowerCase() || '';
  let detectedText = "Default OCR text from image";
  if (fileName.includes('math')) {
    detectedText = "f(x) = x² + 3x - 7";
  } else if (fileName.includes('science')) {
    detectedText = "Water (H₂O) cycle diagram showing evaporation, condensation, and precipitation";
  } else if (fileName.includes('history')) {
    detectedText = "Declaration of Independence, signed July 4, 1776";
  }
  return {
    success: true,
    text: detectedText,
    preview: URL.createObjectURL(imageFile)
  };
};

// Mock LLM response generation
export const generateResponse = async ({ userPrompt, detectedText }) => {
  console.log("Mock generating response for:", { userPrompt, detectedText });
  await new Promise(resolve => setTimeout(resolve, 1500));
  let response = "I'm not sure how to answer that. Could you provide more information?";
  if (detectedText.includes('f(x) = x²') || userPrompt.includes('derivative')) {
    response = "Let me solve this calculus problem for you:\n\nThe derivative of f(x) = x² + 3x - 7 is:\n\nf'(x) = 2x + 3\n\nTo find this, I applied the power rule for x² (which gives 2x) and the coefficient rule for 3x (which gives 3). The constant -7 disappears since the derivative of a constant is zero.";
  } else if (detectedText.includes('water') || detectedText.includes('H₂O')) {
    response = "The water cycle is the continuous movement of water within the Earth and atmosphere:\n\n1. Evaporation: Water from oceans, lakes and rivers turns into water vapor\n2. Condensation: Water vapor forms clouds\n3. Precipitation: Water falls back to Earth as rain, snow, or hail\n4. Collection: Water returns to oceans, lakes and rivers\n\nThis cycle is powered by solar energy and gravity, and is essential for all life on Earth.";
  } else if (detectedText.includes('Declaration') || detectedText.includes('1776')) {
    response = "The Declaration of Independence was adopted by the Continental Congress on July 4, 1776, announcing that the thirteen American colonies were no longer subject to British rule. Key authors included Thomas Jefferson, John Adams, and Benjamin Franklin. The document contains the famous phrase: \"We hold these truths to be self-evident, that all men are created equal...\"";
  } else {
    response = `Here's what I can tell you about "${detectedText || userPrompt}":\n\nThis is a sample educational response that would normally be generated by an LLM. In a real implementation, this would provide detailed, accurate information about the topic.\n\nWhat else would you like to know?`;
  }
  return {
    success: true,
    text: response
  };
};

// Mock socket events for real-time updates
export const mockSocketEmit = (eventName, data) => {
  console.log("Mock socket emit:", eventName, data);
  if (typeof window.mockSocketListeners?.[eventName] === 'function') {
    window.mockSocketListeners[eventName](data);
  }
};

if (typeof window !== 'undefined') {
  window.mockSocketListeners = {};
}

export const mockSocket = {
  on: (event, callback) => {
    console.log("Mock socket listening for:", event);
    if (typeof window !== 'undefined') {
      window.mockSocketListeners[event] = callback;
    }
    return mockSocket;
  },
  emit: mockSocketEmit,
  off: (event) => {
    console.log("Mock socket stopped listening for:", event);
    if (typeof window !== 'undefined') {
      delete window.mockSocketListeners[event];
    }
    return mockSocket;
  },
  id: "mock-socket-id",
  connected: true
}; 